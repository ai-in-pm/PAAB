[project]
name = "psychopy-ai-agent-builder"
dynamic = ["version"]
requires-python = ">=3.8, <3.12"
description = "PsychoPy AI Agent Builder - CrewAI-style framework for building AI agent teams"
readme = {file = "README.md", content-type = "text/markdown"}
authors = [
    {name = "AI in PM", email = "ai@example.com"},
]
maintainers = [
    {name = "AI in PM", email = "ai@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
]

dependencies = [
    # Core AI and ML
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "langchain>=0.1.0",
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    
    # Vector databases
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    
    # Web and API
    "requests>=2.31.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "beautifulsoup4>=4.12.0",
    
    # Data processing
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "jsonschema>=4.17.0",
    
    # Async and concurrency
    "asyncio",
    "aiohttp>=3.8.0",
    
    # Monitoring and logging
    "structlog>=23.1.0",
    "rich>=13.4.0",
    
    # Security
    "cryptography>=41.0.0",
    "pyjwt>=2.8.0",
    
    # Utilities
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
    
    # GUI framework
    "streamlit>=1.25.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

# Extended AI capabilities
ai-extended = [
    "google-generativeai>=0.3.0",
    "langchain-community>=0.0.10",
    "spacy>=3.6.0",
    "nltk>=3.8.1",
]

# Advanced data processing
data-advanced = [
    "scikit-learn>=1.3.0",
    "scipy>=1.11.0",
    "openpyxl>=3.1.0",
    "python-docx>=0.8.11",
    "PyPDF2>=3.0.0",
]

# Cloud and deployment
cloud = [
    "boto3>=1.28.0",
    "azure-storage-blob>=12.17.0",
    "google-cloud-storage>=2.10.0",
    "docker>=6.1.0",
]

# Monitoring and observability
monitoring = [
    "prometheus-client>=0.17.0",
    "grafana-api>=1.0.3",
    "jaeger-client>=4.8.0",
]

# All optional dependencies
all = [
    "psychopy-ai-agent-builder[dev,docs,ai-extended,data-advanced,cloud,monitoring]",
]

[project.urls]
Homepage = "https://github.com/ai-in-pm/psychopy-ai-agent-builder"
Documentation = "https://psychopy-ai-agent-builder.readthedocs.io"
Repository = "https://github.com/ai-in-pm/psychopy-ai-agent-builder"
Issues = "https://github.com/ai-in-pm/psychopy-ai-agent-builder/issues"

[project.scripts]
paab = "src.cli.main:main"
psychopy-agent = "src.cli.main:main"
agent-builder = "src.cli.main:main"

[project.gui-scripts]
paab-studio = "src.studio.main:launch_studio"

[build-system]
requires = [
    "setuptools>=68.0.0",
    "wheel>=0.41.0",
    "setuptools-scm>=7.1.0",
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["src"]
include-package-data = true

[tool.setuptools.dynamic]
version = {attr = "src.__version__"}

[tool.setuptools.package-data]
"src" = ["**/*.yaml", "**/*.json", "**/*.txt", "**/*.md"]
"src.assets" = ["**/*"]
"src.templates" = ["**/*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "openai.*",
    "anthropic.*",
    "langchain.*",
    "transformers.*",
    "torch.*",
    "chromadb.*",
    "streamlit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.pylint]
load-plugins = ["pylint.extensions.docparams"]
max-line-length = 88
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
changelog_file = "CHANGELOG.md"
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^docs:",
    "^test:",
    "^ci:",
]

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease = true
prerelease_token = "dev"
